pipeline TemperaturePipeline {
    // Step 1: Download the ZIP file
    block DownloadZip oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Step 2: Unzip the file
    block UnzipFile oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Step 3: Pick the relevant CSV file
    block PickCSV oftype FilePicker {
        path: "/data.csv";
    }

    // Step 4: Read raw data from the CSV
    block ReadRawData oftype TextFileInterpreter {}

    // Step 5: Parse the CSV file
    block ParseCSV oftype CSVInterpreter {
        delimiter: ";";
    }

    // Step 6: Filter columns to keep only relevant ones
    block FilterColumns oftype ColumnFilter {
        keep: ["Geraet", "Hersteller", "Model", "Monat", "Temperatur in 째C (DWD)", "Batterietemperatur in 째C"];
    }

    // Step 7: Rename columns from German to English
    block RenameColumns oftype ColumnRenamer {
        mappings: {
            "Geraet": "id",
            "Hersteller": "producer",
            "Model": "model",
            "Monat": "month",
            "Temperatur in 째C (DWD)": "temperature",
            "Batterietemperatur in 째C": "battery_temperature";
        }
    }

    // Step 8: Validate the data
    block ValidateData oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype integer,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype integer,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    // Step 9: Convert temperatures to Fahrenheit
    transform CelsiusToFahrenheit {
        from TempCelsius oftype decimal;
        to TempFahrenheit oftype decimal;

        TempFahrenheit: 32 + ((TempCelsius / 5) * 9);
    }

    block ConvertTemperature oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        uses: CelsiusToFahrenheit;
    }

    block ConvertBatteryTemperature oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        uses: CelsiusToFahrenheit;
    }

    // Step 10: Save the transformed data into SQLite
    block SaveData oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }

    // Define the pipeline workflow
    DownloadZip
        -> UnzipFile
        -> PickCSV
        -> ReadRawData
        -> ParseCSV
        -> FilterColumns
        -> RenameColumns
        -> ValidateData
        -> ConvertTemperature
        -> ConvertBatteryTemperature
        -> SaveData;
}
